# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
#
# This base image is based on debian:buster-slim and contains:
#  * gcc 8.3.0
#  * clang 7.0.1
#  * cmake 3.13.4
#  * and more
#
# For details see https://github.com/ska-telescope/cpp_build_base
#
# To run locally use docker command:
# sudo docker run -it nexus.engageska-portugal.pt/ska-docker/cpp_build_base

variables:
  # Needed if you want automatic submodule checkout
  # For details see https://docs.gitlab.com/ee/ci/yaml/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: normal

.src_dir_ref_storage: &src_dir_ref_storage
  - mkdir -p build
  - pwd > build/original_source_directory

# Replaces all references to the location in 'original_source_directory' with $PWD
# in artifact binaries
.src_dir_ref_replacement: &src_dir_ref_replacement
  - old_sdir=`cat build/original_source_directory`
  - this_sdir=`pwd`
  - find build
    -type f -a
    \! \(
      -perm /111 -o
      \(
        -name '*.o' -o -name '*.a' -o -name '*.so'
      \)
    \)
    -exec sed -i "s|$old_sdir|$this_sdir|g" {} +

.generator_packages: &generator_packages
  - apt install -y make git wget cmake xsltproc
  - apt install -y gnupg2 software-properties-common jq moreutils

.project_packages: &project_packages
  - apt install -y wget casacore-dev libboost-all-dev rapidjson-dev

.python_packages: &python_packages
  - apt install -y python3-pip pybind11-dev python3-pybind11

.doc_packages: &doc_packages
  - apt install -y python3-pip doxygen graphviz
  #- pip3 install -U sphinx breathe exhale recommonmark sphinx-rtd-theme sphinxcontrib-autodoc-doxygen sphinx-autopackagesummary
  - pip3 install -r docs/requirements.txt

.lint_packages: &lint_packages
  - apt install -y python3-pip clang clang-tidy clang-tools iwyu cppcheck

.cuda_variables: &cuda_variables
  - export CUDA_HOME=/usr/local/cuda
  - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${CUDA_HOME}/lib64:${CUDA_HOME}/extras/CUPTI/lib64
  - export PATH=$PATH:$CUDA_HOME/bin
    # when building without cuda device enabled locate the stub driver for linking to libcuda.so
  - export LIBRARY_PATH=$LIBRARY_PATH:${CUDA_HOME}/lib64/stubs

.common:
  tags: [k8srunner]

.minimal_build_dependencies:
  extends: .common
  image: $CAR_OCI_REGISTRY_HOST/ska-cicd-cpp-build-base:0.2.10
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    CUDA_ENABLED: "OFF"
  before_script:
    - apt update
    - *generator_packages
    - *project_packages
    - *src_dir_ref_storage

.complete_build_dependencies:
  extends: .common
  image: $CAR_OCI_REGISTRY_HOST/icrar-leap-accelerate-build:0.12.0
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    CUDA_ENABLED: "ON"
  before_script: &cuda_build_dependencies
    - apt update
    - *generator_packages
    - *project_packages
    - *python_packages
    - *cuda_variables
    - *src_dir_ref_storage

.docs_dependencies:
  extends: [.minimal_build_dependencies]
  before_script:
    - apt update
    - *generator_packages
    - *project_packages
    - *doc_packages
    - *src_dir_ref_storage

.lint_build_dependencies:
  extends: .common
  image: $CAR_OCI_REGISTRY_HOST/icrar-leap-accelerate-build:0.12.0
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    CUDA_ENABLED: "ON"
  before_script:
    - apt update
    - *generator_packages
    - *project_packages
    - *python_packages
    - *lint_packages
    - *cuda_variables
    - *src_dir_ref_storage

.minimal_test_dependencies:
  extends: .common
  image: $CAR_OCI_REGISTRY_HOST/ska-cicd-cpp-build-base:0.2.10
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    CUDA_ENABLED: "OFF"
  before_script:
    - apt update
    - *generator_packages
    - *project_packages
    - *src_dir_ref_replacement

.complete_test_dependencies:
  extends: .common
  image: $CAR_OCI_REGISTRY_HOST/icrar-leap-accelerate-build:0.12.0
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    CUDA_ENABLED: "ON"
  before_script: &cuda_test_dependencies
    - apt update
    - *generator_packages
    - *project_packages
    - *python_packages
    - *cuda_variables
    - *src_dir_ref_replacement

.lint_dependencies:
  extends: .complete_build_dependencies
  before_script:
    - apt update
    - *generator_packages
    - *project_packages
    - *lint_packages
    - *cuda_variables
    - *src_dir_ref_replacement

stages:
  - build
  - linting
  - test
  - deploy

########
# Build
########

download_testdata:
  extends: .common
  image: $CAR_OCI_REGISTRY_HOST/ska-cicd-cpp-build-base:0.2.10
  stage: build
  before_script:
    - apt update && apt install -y wget gzip
  script:
    - cd testdata
    - bash install.sh
    - cd ..
  artifacts:
    paths:
      - testdata

.build_debug:
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG="-g -O1" -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage"
    - make -j2
  artifacts:
    paths:
      - build

build_debug_minimal:
  extends: [.minimal_build_dependencies, .build_debug]

build_debug:
  extends: [.complete_build_dependencies, .build_debug]

.build_release:
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DWCONVERSION=TRUE -DWERROR=TRUE
    - make -j2
  artifacts:
    paths:
      - build

build_release_minimal:
  extends: [.minimal_build_dependencies, .build_release]

build_release:
  extends: [.complete_build_dependencies, .build_release]

build_docs:
  extends: .docs_dependencies
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release
    - make sphinx -j2
  artifacts:
    paths:
      - build

.build_export_compile_commands:
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_COMPILER=clang++ -DUSE_PCH=OFF
    # This filters out external source file dependencies such as gtest
    - jq '[ . - map(select(.file | contains("/external/"))) | .[] ]' compile_commands.json | sponge compile_commands.json
  artifacts:
    paths:
      - build

build_export_compile_commands:
  extends: [.lint_build_dependencies, .build_export_compile_commands]

build_daliuge_palette:
 stage: build
 only:
   - tags
   - master
 before_script:
   - apt update && apt install -y doxygen git xsltproc wget
   - export PROJECT_NAME=leap
   - export PROJECT_VERSION=$(git rev-parse --short HEAD)
   - export GIT_REPO=$(git config --get remote.origin.url)
   - git config --global user.name $GITHUB_USERNAME
   - git config --global user.email "$GITHUB_USERNAME@gmail.com"
   - wget https://raw.githubusercontent.com/ICRAR/daliuge/master/tools/xml2palette/xml2palette.py
 script:
   - python3 xml2palette.py -i ./ -o leap-$CI_COMMIT_REF_NAME.palette
 after_script:
   - export PROJECT_NAME=leap
   - export PROJECT_VERSION=$(git rev-parse --short HEAD)
   - git clone https://$GITHUB_TOKEN@github.com/ICRAR/EAGLE_test_repo
   - mkdir -p EAGLE_test_repo/$PROJECT_NAME
   - mv $PROJECT_NAME-$CI_COMMIT_REF_NAME.palette EAGLE_test_repo/$PROJECT_NAME/
   - cd EAGLE_test_repo
   - git add *
   - git commit -m "Automatically generated $PROJECT_NAME palette (branch $CI_COMMIT_REF_NAME, commit $PROJECT_VERSION)"
   - git push

#######
# Lint
#######

.lint_clang_tidy:
  stage: linting
  script:
    - cd build

    # This filters out external source file dependencies such as gtest
    - jq '[ . - map(select(.file | contains("/external/"))) | .[] ]' compile_commands.json | sponge compile_commands.json

    - pip3 install pyyaml
    - python3 -u /usr/bin/run-clang-tidy-11.py -quiet 2>&1 | tee clang-tidy.log || FAILED=true
    - cd ..
    - cat build/clang-tidy.log | python3 .clang-tidy-to-junit.py $PWD/ clang-tidy > build/clang-tidy-junit.xml
    - if [ $FAILED ]; then exit 1; fi
  allow_failure: true
  artifacts:
    when: always
    paths:
      - build
    reports:
      junit: build/clang-tidy-junit.xml

lint_clang_tidy:
  extends: [.lint_dependencies, .lint_clang_tidy]
  needs: ["build_export_compile_commands"]

.lint_iwyu:
  stage: linting
  script:
    - iwyu_tool -j 2 -p ./build -- -Xiwyu --transitive_includes_only 2>&1 | tee build/iwyu.log
    - cat build/iwyu.log | python3 .clang-tidy-to-junit.py $PWD/ iwyu > build/iwyu-junit.xml
  allow_failure: true
  artifacts:
    when: always
    paths:
      - build
    reports:
      junit: build/iwyu-junit.xml

lint_iwyu:
  extends: [.lint_dependencies, .lint_iwyu]
  needs: ["build_export_compile_commands"]

.lint_cppcheck:
  stage: linting
  script:
    - pip3 install cppcheck-junit
    - cd build
    - 'cppcheck
      --xml-version=2
      --enable=all
      --project=compile_commands.json
      --platform=unix64
      -q --std=c++14
      --library=googletest 2>&1 | tee cppcheck.xml'
    - cppcheck_junit cppcheck.xml cppcheck-junit.xml
  allow_failure: true
  artifacts:
    when: always
    paths:
      - build
    reports:
      junit: build/cppcheck-junit.xml

lint_cppcheck:
  extends: [.lint_dependencies, .lint_cppcheck]
  needs: ["build_export_compile_commands"]

lint_docs:
  extends: .docs_dependencies
  stage: linting
  dependencies: []
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release -DWERROR=TRUE
    - make sphinx -j2
  artifacts:
    paths:
      - build
  allow_failure: true

#######
# Test
#######

.test:
  stage: test
  after_script:
    - cd build
    - ctest2junit > unit-tests.xml
  timeout: 1h
  artifacts:
    paths:
      - build
    reports:
      junit: build/unit-tests.xml

test_debug_minimal:
  extends: [.minimal_test_dependencies, .test]
  needs: ["download_testdata", "build_debug_minimal"]
  tags: [k8srunner]
  variables:
    GTEST_FILTER: "-*Cuda*:*cuda*:*Gpu*:*gpu*:*SKA*"
  script:
    # portable testing
    - export TEST_DATA_DIR=$PWD/testdata
    - cd build
    - ctest -T test --no-compress-output --verbose --debug

test_debug_all:
  extends: [.complete_test_dependencies, .test]
  needs: ["download_testdata", "build_debug"]
  tags: ["k8srunner-gpu"]
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    CUDA_ENABLED: "ON"
    NVIDIA_VISIBLE_DEVICES: "all"
  script:
    - nvidia-smi
    # portable testing
    - export TEST_DATA_DIR=$PWD/testdata
    - cd build
    - ctest -T test --no-compress-output --verbose
  timeout: 30m
  allow_failure: true

# A job that runs the tests under valgrid
# It might take a while, so not always run by default
.test_memcheck:
  extends: .minimal_test_dependencies
  stage: test
  needs: ["download_testdata", "build_debug_minimal"]
  before_script:
    - apt update && apt install -y valgrind
  script:
    - cd build
    - ctest -T memcheck --verbose
  only:
    - tags
    - schedules

pages:
  extends: .minimal_test_dependencies
  stage: deploy
  needs: ["test_debug_minimal", "lint_clang_tidy", "lint_cppcheck", "lint_iwyu"]
  script:
    - apt update && apt install -y curl gcovr moreutils python3-pip jq
    - pip3 install yq
    - mkdir -p build/reports/code-coverage
    - gcovr -r ../ -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/tests/.*' --html --html-details -o build/reports/code-coverage/index.html | sponge gcovr-html.log
    - gcovr -r ../ -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/tests/.*' --xml -o build/reports/code-coverage.xml | sponge gcovr-xml.log
  after_script:
    # Combine Linting XML
    - cp build/unit-tests.xml build/reports/unit-tests.xml
    - cp build/cppcheck-junit.xml build/reports/cppcheck-junit.xml
    - cp build/clang-tidy-junit.xml build/reports/clang-tidy-junit.xml
    - cp build/iwyu-junit.xml build/reports/iwyu-junit.xml
    - 'xq -s "{testsuites: { testsuite: [ .[0].testsuite, .[1].testsuite, .[2].testsuite ] } }"
      build/reports/clang-tidy-junit.xml
      build/reports/cppcheck-junit.xml
      build/reports/iwyu-junit.xml
      --xml-output | sponge build/reports/linting.xml'
    # recalculate linting totals
    - 'xq ".testsuites |= {\"@tests\": .testsuite | map(.\"@tests\" | tonumber) | add }+ ." build/reports/linting.xml --xml-output | sponge build/reports/linting.xml'
    - 'xq ".testsuites |= {\"@errors\": .testsuite | map(.\"@errors\" | tonumber) | add }+ ." build/reports/linting.xml --xml-output | sponge build/reports/linting.xml'
    - 'xq ".testsuites |= {\"@failures\": .testsuite | map(.\"@failures\" | tonumber) | add }+ ." build/reports/linting.xml --xml-output | sponge build/reports/linting.xml'
  artifacts:
    when: always
    paths:
      - ./build
    reports:
      cobertura: build/reports/code-coverage.xml
  allow_failure: true

# https://gitlab.com/ska-telescope/templates-repository/-/blob/master/gitlab-ci/includes/post_step.yml
include:
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/post_step.yml'

#########
# Docker
#########

.docker_common:
  image: docker:stable
  tags:
    - docker-executor
  before_script:
    # - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
    - echo $CAR_OCI_REGISTRY_PASSWORD | docker login -u $CAR_OCI_REGISTRY_USERNAME --password-stdin $CAR_OCI_REGISTRY_HOST
    - docker info

# This manual job builds and deploys a development image for building leap accelerate with
# required packages included.
docker_ci_build_deploy:
  stage: build
  extends: .docker_common
  when: manual
  script:
    - DOCKER_TAG=$(cat version.txt)
    # The docker image tag is:
    #  * The git tag (without the initial "v") if building a git tag
    #  * "latest" when building the master branch
    #  * Other branches do not yield a docker image
    - IMAGE_NAME=icrar-leap-accelerate-build
    - docker build -t $CAR_OCI_REGISTRY_HOST/$IMAGE_NAME:$DOCKER_TAG ./docker/build
    - docker tag $CAR_OCI_REGISTRY_HOST/$IMAGE_NAME:$DOCKER_TAG $CAR_OCI_REGISTRY_HOST/$IMAGE_NAME:latest
    - docker push $CAR_OCI_REGISTRY_HOST/$IMAGE_NAME

docker_build:
  stage: build
  extends: .docker_common
  only:
   - tags
   - master
  script:
    # The docker image tag is:
    #  * The git tag (without the initial "v") if building a git tag
    #  * "latest" when building the master branch
    #  * Other branches do not yield a docker image
    - IMAGE_NAME=icrar-leap-accelerate
    - BRANCH=${CI_COMMIT_TAG:-${CI_COMMIT_BRANCH}}
    - DOCKER_TAG=${BRANCH##v}
    - >
      if [ "$CI_COMMIT_BRANCH" = master ]; then
        DOCKER_TAG=latest
      fi
    - >
      docker build -t $CAR_OCI_REGISTRY_HOST/$IMAGE_NAME:$DOCKER_TAG .
    - docker save $CAR_OCI_REGISTRY_HOST/$IMAGE_NAME:$DOCKER_TAG > docker_image.tar
  artifacts:
    paths:
      - docker_image.tar
    expire_in: 1 day

docker_publish:
  stage: deploy
  extends: .docker_common
  needs: [docker_build]
  only:
    - tags
    - master
  script:
    - image_id=`docker load < docker_image.tar | sed -n '/Loaded image:/ { s/Loaded image://p }'`
    - echo $image_id
    - docker push $image_id
