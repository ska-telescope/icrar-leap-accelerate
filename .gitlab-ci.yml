# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
#
# This base image is based on debian:buster-slim and contains:
#  * gcc 8.3.0
#  * clang 7.0.1
#  * cmake 3.13.4
#  * and more
#
# For details see https://github.com/ska-telescope/cpp_build_base
#
image: nexus.engageska-portugal.pt/ska-docker/cpp_build_base

variables:
  # Needed if you want automatic submodule checkout
  # For details see https://docs.gitlab.com/ee/ci/yaml/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: normal

.src_dir_ref_storage: &src_dir_ref_storage
  - mkdir build || true
  - pwd > build/original_source_directory

.src_dir_ref_replacement: &src_dir_ref_replacement
  - old_sdir=`cat build/original_source_directory`
  - this_sdir=`pwd`
  - find build
    -type f -a
    \! \(
      -perm /111 -o
      \(
        -name '*.o' -o -name '*.a' -o -name '*.so'
      \)
    \)
    -exec sed -i "s|$old_sdir|$this_sdir|g" {} +

.common:
  tags: [engageska, docker]

.required_dependencies:
  extends: .common
  before_script:
    - apt update && apt install -y git jq moreutils wget doxygen graphviz casacore-dev libboost-all-dev

.test_dependencies:
  extends: .common
  before_script:
    - apt update && apt install -y wget casacore-dev libboost-all-dev
    - cd testdata
    - bash install.sh
    - cd ..
  artifacts:
    paths:
      testdata

stages:
  - build
  - linting
  - test
  - pages

build_debug:
  extends: .required_dependencies
  stage: build
  script:
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage"
    - make -j2
  artifacts:
    paths:
      - build

build_release:
  extends: .required_dependencies
  stage: build
  script:
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Release
    - make -j2
  artifacts:
    paths:
      - build

build_export_compile_commands:
  extends: .required_dependencies
  stage: build
  script:
    - rm -rf build && mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_COMPILER=clang++
    # This filters out external source file dependencies such as gtest
    - jq '[ . - map(select(.file | contains("/external/"))) | .[] ]' compile_commands.json | sponge compile_commands.json
  artifacts:
    paths:
      - build

lint_clang_tidy:
  extends: .required_dependencies
  stage: linting
  needs: ["build_export_compile_commands"]
  script:
    - cd build
    - run-clang-tidy -quiet

lint_iwyu:
  extends: .required_dependencies
  stage: linting
  needs: ["build_export_compile_commands"]
  script:
    - cd build
    - iwyu_tool -j 2 -p .

lint_cppcheck:
  extends: .required_dependencies
  stage: linting
  needs: ["build_export_compile_commands"]
  script:
    - cd build
    - 'cppcheck
      --error-exitcode=1
      --project=compile_commands.json
      --platform=unix64
      -q --std=c++14
      -i $PWD/../external
      -i $PWD/../src/icrar/leap-accelerate/tests
      -i $PWD/../src/icrar/leap-accelerate-cli/tests'

test:
  extends: .test_dependencies
  stage: test
  needs: ["build_debug"]
  variables:
    GTEST_FILTER: "-*Cuda*:*cuda*:*gpu*"
  script:
    - cd build
    - echo "GTEST_FILTER=$GTEST_FILTER"
    - ctest -T test --no-compress-output --verbose
  after_script:
    - cd build
    - ctest2junit > ctest.xml
  artifacts:
    paths:
      - build/
    reports:
      junit: build/ctest.xml

# A job that runs the tests under valgrid
# It might take a while, so not always run by default
test_memcheck:
  extends: .common
  stage: test
  needs: ["build_debug"]
  before_script:
    - apt update && apt install -y valgrind
  script:
    - cd build
    - ctest -T memcheck
  only:
    - tags
    - schedules

pages:
  extends: .common
  stage: pages
  needs: ["test"]
  before_script:
    - apt update && apt install -y curl
  script:
    - mkdir -p .public/build/reports
    - cd .public
    - gcovr -r ../ -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/tests/.*' --html --html-details -o index.html
    - gcovr -r ../ -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/tests/.*' --xml -o build/reports/code-coverage.xml
    - cp ../build/ctest.xml build/reports/unit-tests.xml
    # Create and upload GitLab badges
    - python ../.produce-ci-metrics.py build/reports > ci-metrics.json
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    - cd ..
    - mv .public public
  artifacts:
    paths:
      - public
