# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
#
# This base image is based on debian:buster-slim and contains:
#  * gcc 8.3.0
#  * clang 7.0.1
#  * cmake 3.13.4
#  * and more
#
# For details see https://github.com/ska-telescope/cpp_build_base
#
# To run locally use docker command:
# sudo docker run -it nexus.engageska-portugal.pt/ska-docker/cpp_build_base

# CUDA Image Alternative
# This base image is based on debian:stretch-slim and contains:
#  * gcc 7.5.0
#  * clang 6.0.0
#  * cuda 10.1
#  * and more
#
# For details see https://gitlab.com/ska-telescope/dspsr
#
# To run locally use docker command:
# sudo docker run -it nexus.engageska-portugal.pt/ska-docker/dspsr-build

variables:
  # Needed if you want automatic submodule checkout
  # For details see https://docs.gitlab.com/ee/ci/yaml/README.html#git-submodule-strategy
  GIT_SUBMODULE_STRATEGY: normal

.src_dir_ref_storage: &src_dir_ref_storage
  - mkdir build || true
  - pwd > build/original_source_directory

.src_dir_ref_replacement: &src_dir_ref_replacement
  - old_sdir=`cat build/original_source_directory`
  - this_sdir=`pwd`
  - find build
    -type f -a
    \! \(
      -perm /111 -o
      \(
        -name '*.o' -o -name '*.a' -o -name '*.so'
      \)
    \)
    -exec sed -i "s|$old_sdir|$this_sdir|g" {} +

.common:
  tags: [engageska, docker]

.required_dependencies:
  extends: .common
  image: nexus.engageska-portugal.pt/ska-docker/cpp_build_base
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    CUDA_ENABLED: "OFF"
  before_script:
    - apt update
    - apt install -y cmake clang clang-tidy clang-tools iwyu cppcheck python3-pip
    - apt install -y git jq moreutils wget doxygen graphviz casacore-dev libboost-all-dev rapidjson-dev
    - pip3 install -U sphinx breathe exhale sphinx-rtd-theme sphinxcontrib-autodoc-doxygen sphinx-autopackagesummary recommonmark

.cuda_dependencies:
  extends: .common
  image: nexus.engageska-portugal.pt/ska-docker/dspsr-build:latest
  variables:
    DEBIAN_FRONTEND: "noninteractive"
    CUDA_ENABLED: "ON"
  before_script:
    - apt update 
    - apt install -y cmake clang clang-tidy clang-tools iwyu cppcheck python3-pip
    - apt install -y git jq moreutils wget doxygen graphviz casacore-dev libboost-all-dev rapidjson-dev
    - pip3 install -U sphinx breathe exhale sphinx-rtd-theme sphinxcontrib-autodoc-doxygen sphinx-autopackagesummary recommonmark
    - apt install -y gnupg2 software-properties-common
    - source ./.gitlab-ci/cuda_install_debian.sh

.all_dependencies:
  extends: .cuda_dependencies

stages:
  - build
  - linting
  - test
  - pages

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - testdata

# Build

download_lfs:
  extends: .common
  image: nexus.engageska-portugal.pt/ska-docker/cpp_build_base
  stage: build
  before_script:
    - apt update && apt install -y wget
  script:
    - cd testdata
    - bash install.sh
    - cd ..
  artifacts:
    when: always
    paths:
      - testdata

.build_debug:
  stage: build
  script:
    - mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG="-g -O1" -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage"
    - make LeapAccelerate LeapAccelerateCLI LeapAccelerate.Tests LeapAccelerateCLI.Tests sphinx -j2
  artifacts:
    when: always
    paths:
      - build

build_debug_minimal:
  extends: [.required_dependencies, .build_debug]

build_debug:
  extends: [.all_dependencies, .build_debug]

.build_release:
  stage: build
  script:
    - mkdir build
    - cd build
    - cmake .. -DWCONVERSION=TRUE -DWERROR=TRUE -DCMAKE_BUILD_TYPE=Release
    - make LeapAccelerate LeapAccelerateCLI sphinx -j2
  artifacts:
    when: always
    paths:
      - build

build_release_minimal:
  extends: [.required_dependencies, .build_release]

build_release:
  extends: [.all_dependencies, .build_release]

.build_export_compile_commands:
  stage: build
  script:
    - rm -rf build && mkdir build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_COMPILER=clang++
    # This filters out external source file dependencies such as gtest
    - jq '[ . - map(select(.file | contains("/external/"))) | .[] ]' compile_commands.json | sponge compile_commands.json
  artifacts:
    when: always
    paths:
      - build

# Use build_export_compile_commands
.build_export_compile_commands_minimal:
  extends: [.required_dependencies, .build_export_compile_commands]

build_export_compile_commands:
  extends: [.all_dependencies, .build_export_compile_commands]

# Lint

.lint_clang_tidy:
  stage: linting
  script:
    - cd build
    - pip install pyyaml
    - python -u /usr/bin/run-clang-tidy-6.0.py -quiet 2>&1 | tee clang-tidy.log
    - cd ..
    - cat build/clang-tidy.log | python .clang-tidy-to-junit.py $PWD/ clang-tidy > build/clang-tidy-junit.xml
  artifacts:
    when: always
    paths:
      - build

# Use lint_clang_tidy
.lint_clang_tidy_minimal:
  extends: [.required_dependencies, .lint_clang_tidy]
  needs: ["build_export_compile_commands_minimal"]

lint_clang_tidy:
  extends: [.all_dependencies, .lint_clang_tidy]
  needs: ["build_export_compile_commands"]

.lint_iwyu:
  stage: linting
  script:
    - iwyu_tool -j 2 -p ./build -- --transitive_includes_only 2>&1 | tee build/iwyu.log
    # iwyu 0.12+ iwyu_tool -j 2 -p ./build -- -Xiwyu --transitive_includes_only 2>&1 | tee build/iwyu.log
    - cat build/iwyu.log | python .clang-tidy-to-junit.py $PWD/ iwyu > build/iwyu-junit.xml
  artifacts:
    when: always
    paths:
      - build

# Use lint_iwyu
.lint_iwyu_minimal:
  extends: [.required_dependencies, .lint_iwyu]
  needs: ["build_export_compile_commands_minimal"]

lint_iwyu:
  extends: [.all_dependencies, .lint_iwyu]
  needs: ["build_export_compile_commands"]

.lint_cppcheck:
  stage: linting
  script:
    - pip install cppcheck-junit
    - cd build
    - 'cppcheck
      --xml-version=2
      --enable=all
      --project=compile_commands.json
      --platform=unix64
      -q --std=c++14
      -j 2
      --library=googletest 2>&1 | tee cppcheck.xml'
    - cppcheck_junit cppcheck.xml cppcheck-junit.xml
  artifacts:
    when: always
    paths:
      - build

.lint_cppcheck_no_tests:
  stage: linting
  script:
    - pip install cppcheck-junit
    - cd build
    - 'cppcheck
      --xml-version=2
      --enable=all
      --project=compile_commands.json
      --platform=unix64
      --std=c++14
      -i $PWD/../external
      -i $PWD/../src/icrar/leap-accelerate/tests
      -i $PWD/../src/icrar/leap-accelerate-cli/tests 2>&1 | tee cppcheck.xml'
    - cppcheck_junit cppcheck.xml cppcheck-junit.xml
  artifacts:
    when: always
    paths:
      - build

# Use lint_cppcheck
.lint_cppcheck_minimal:
  extends: [.all_dependencies, .lint_cppcheck]
  needs: ["build_export_compile_commands_minimal"]

lint_cppcheck:
  extends: [.all_dependencies, .lint_cppcheck_no_tests]
  needs: ["build_export_compile_commands"]

# Test

.test:
  stage: test
  variables:
    GTEST_FILTER: "-*Cuda*:*cuda*:*Gpu*:*gpu*:*SKA*"
  script:
    - cd build
    - ctest -T test --no-compress-output --verbose
  after_script:
    - cd build
    - ctest2junit > ctest.xml
  timeout: 1h
  artifacts:
    when: always
    paths:
      - build/
    reports:
      junit: build/ctest.xml

test_debug_minimal:
  extends: [.required_dependencies, .test]
  needs: ["download_lfs", "build_debug_minimal"]

# Needs cuda enabled runner
test_debug_all:
  extends: [.all_dependencies, .test]
  needs: ["download_lfs", "build_debug"]
  tags: ["cuda", "docker"]

# A job that runs the tests under valgrid
# It might take a while, so not always run by default
test_memcheck:
  extends: .required_dependencies
  stage: test
  needs: ["download_lfs", "build_debug_minimal"]
  before_script:
    - apt update && apt install -y valgrind
  script:
    - cd build
    - ctest -T memcheck --verbose
  only:
    - tags
    - schedules

pages:
  extends: .required_dependencies
  stage: pages
  needs: ["test_debug_minimal", "lint_clang_tidy", "lint_cppcheck", "lint_iwyu"]
  script:
    - apt update && apt install -y curl gcovr moreutils python3-pip jq
    - pip3 install yq
    - mkdir -p .public/build/reports/code-coverage
    - cd .public
    - gcovr -r ../ -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/tests/.*' --html --html-details -o build/reports/code-coverage/index.html | sponge gcovr-html.log
    - gcovr -r ../ -e '.*/external/.*' -e '.*/CompilerIdCXX/.*' -e '.*/tests/.*' --xml -o build/reports/code-coverage.xml | sponge gcovr-xml.log
    - cp ../build/ctest.xml build/reports/unit-tests.xml
    - cp ../build/cppcheck-junit.xml build/reports/cppcheck-junit.xml
    - cp ../build/clang-tidy-junit.xml build/reports/clang-tidy-junit.xml
    - cp ../build/iwyu-junit.xml build/reports/iwyu-junit.xml
    
    # Combine Linting XML
    - 'xq -s "{testsuites: { testsuite: [ .[0].testsuite, .[1].testsuite, .[2].testsuite ] } }"
      build/reports/clang-tidy-junit.xml
      build/reports/cppcheck-junit.xml
      build/reports/iwyu-junit.xml
      --xml-output | sponge build/reports/linting.xml'
    - 'xq ".testsuites |= {\"@tests\": .testsuite | map(.\"@tests\" | tonumber) | add }+ ." build/reports/linting.xml --xml-output | sponge build/reports/linting.xml'
    - 'xq ".testsuites |= {\"@errors\": .testsuite | map(.\"@errors\" | tonumber) | add }+ ." build/reports/linting.xml --xml-output | sponge build/reports/linting.xml'
    - 'xq ".testsuites |= {\"@failures\": .testsuite | map(.\"@failures\" | tonumber) | add }+ ." build/reports/linting.xml --xml-output | sponge build/reports/linting.xml'

    # Create and upload GitLab badges
    - python ../.produce-ci-metrics.py build/reports > ci-metrics.json
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    - cd ..
    - mv .public public
  artifacts:
    when: always
    paths:
      - public
  allow_failure: true
